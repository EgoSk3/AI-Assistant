import speech_recognition as sr
import requests
import json

import webbrowser
import xml.etree.ElementTree as ET


# ================================
# 1. Speech Recognizer
# ================================

class SpeechRecognizer:
    def __init__(self, engine="whisper"):
        self.recognizer = sr.Recognizer()
        self.engine = engine
        self.configure_recognizer()

    def configure_recognizer(self):
        self.recognizer.pause_threshold = 2.0
        self.recognizer.energy_threshold = 400
        self.recognizer.dynamic_energy_threshold = True

    def record_audio(self):
        with sr.Microphone(sample_rate=16000) as source:
            print("\nüéôÔ∏è –ì–æ–≤–æ—Ä–∏—Ç–µ —Å–µ–π—á–∞—Å... (–¥–ª—è –≤—ã—Ö–æ–¥–∞ —Å–∫–∞–∂–∏—Ç–µ '–∑–∞–∫–æ–Ω—á–∏—Ç—å' –∏–ª–∏ '–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å')")
            self.recognizer.adjust_for_ambient_noise(source, duration=1)

            try:
                audio = self.recognizer.listen(
                    source,
                    timeout=5,
                    phrase_time_limit=10
                )
                return audio
            except sr.WaitTimeoutError:
                print("‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ")
                return None

    def recognize_speech(self, audio):
        if audio is None:
            print("‚ùå –ê—É–¥–∏–æ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ")
            return None

        try:
            if self.engine == "whisper":
                result = self.recognizer.recognize_whisper(audio, language="russian", model="base")
                print("üß† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω Whisper")
            elif self.engine == "google":
                result = self.recognizer.recognize_google(audio, language="ru-RU")
                print("üß† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω Google Web Speech")
            else:
                print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–≤–∏–∂–æ–∫: {self.engine}")
                return None

            return result.strip() if isinstance(result, str) else None

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è ({self.engine}): {str(e)[:100]}")
            return None

    def run(self):
        print(f"=== –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ ({self.engine}) ===")
        print("üó£Ô∏è –ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –∏ —Ä–∞–∑–±–æ—Ä—á–∏–≤–æ. –î–ª—è –≤—ã—Ö–æ–¥–∞ —Å–∫–∞–∂–∏—Ç–µ '–∑–∞–∫–æ–Ω—á–∏—Ç—å' –∏–ª–∏ '–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å'")
        while True:
            audio = self.record_audio()
            if not audio:
                continue

            text = self.recognize_speech(audio)
            if text:
                print(f"\nüìù –†–µ–∑—É–ª—å—Ç–∞—Ç: \033[1;32m{text}\033[0m")
                if text.lower() in ["–∑–∞–∫–æ–Ω—á–∏—Ç—å", "–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"]:
                    break
                yield text
            else:
                print("‚ùå –†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")


# ================================
# 2. OLLAMA NER –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
# ================================

def build_prompt(text):
    return f"""
–¢—ã ‚Äî —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. –ò–∑–≤–ª–µ–∫–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –ø—Ä–∏–≤–æ–¥—è –≤—Å–µ —Å—É—â–Ω–æ—Å—Ç–∏ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ, –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂).

–¢–µ–∫—Å—Ç: "{text}"

–ü—Ä–∞–≤–∏–ª–∞:
1. equipment: —Ç–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (—ç–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å, –ø—Ä–µ—Å—Å, –Ω–∞—Å–æ—Å –∏ —Ç.–¥.)
2. number: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
3. symptom: –ø—Ä–æ–±–ª–µ–º–∞ (3-5 —Å–ª–æ–≤ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ)
4. action: —Ç—Ä–µ–±—É–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–∏–Ω—Ñ–∏–Ω–∏—Ç–∏–≤)
5. urgency: –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π/—Å—Ä–æ—á–Ω—ã–π/–∫—Ä–∏—Ç–∏—á–Ω—ã–π (—Å—Ä–æ—á–Ω—ã–π –ø—Ä–∏ —Å–ª–æ–≤–∞—Ö "—Å—Ä–æ—á–Ω–æ", "–∞–≤–∞—Ä–∏—è")

–ü—Ä–∏–º–µ—Ä –≤—ã–≤–æ–¥–∞:
{{
  "equipment": "—ç–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å",
  "number": "12",
  "symptom": "–∫–æ—Ä—Ä–æ–∑–∏—è",
  "action": "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å",
  "urgency": "–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π"
}}

–í—ã–≤–µ–¥–∏ –¢–û–õ–¨–ö–û JSON, –±–µ–∑ –¥—Ä—É–≥–∏—Ö —Å–ª–æ–≤ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
""".strip()


def ask_ollama(prompt, model="phi3"):
    url = "http://localhost:11434/api/generate"
    payload = {
        "model": model,
        "prompt": prompt,
        "stream": False
    }
    response = requests.post(url, json=payload)
    if response.status_code == 200:
        raw_response = response.json().get("response", "").strip()

        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å {{ ‚Üí –≤–µ—Ä–Ω–µ–º None
        if not raw_response.startswith("{"):
            print("‚ùå –ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ JSON")
            return None

        return raw_response
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ Ollama: {response.status_code}")
        return None


def extract_entities(text):
    prompt = build_prompt(text)
    raw_response = ask_ollama(prompt)

    try:
        clean_json = raw_response.split("```json")[1].split("```")[0] if "```json" in raw_response else raw_response
        return json.loads(clean_json)
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON: {e}")
        return {"raw_response": raw_response}


# ================================
# 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å—Å—ã–ª–∫–∏
# ================================

def build_winnum_url(entities):
    base_url = "http://127.0.0.1/Winnum/views/pages/app/agw.jsp"

    params = {
        "rpc": "WNApplicationTagHelper.getTagCalculationValue",
        "mode": "yes",
        "appid": "winnum.org.app.WNApplicationInstance:1",
        "from": "now-2h",
        "till": "now"
    }

    if "equipment" in entities and "number" in entities:
        equip_type = entities["equipment"].lower()
        product_map = {
            "—Å—Ç–∞–Ω–æ–∫": "WNProduct:",
            "–ø—Ä–µ—Å—Å": "WNPress:",
            "—Ä–æ–±–æ—Ç": "WNRobot:",
            "–¥–≤–∏–≥–∞—Ç–µ–ª—å": "WNMotor:",
            "–Ω–∞—Å–æ—Å": "WNPump:",
            "—ç–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å": "WNMotor:"
        }
        pid = product_map.get(equip_type, "WNProduct:") + str(entities["number"])
        params["pid"] = pid

    if "symptom" in entities:
        symptom_map = {
            "–≤–∏–±—Ä–∞—Ü–∏—è": "NC_VIBRATION",
            "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": "NC_TEMPERATURE",
            "–¥–∞–≤–ª–µ–Ω–∏–µ": "NC_PRESSURE",
            "—à—É–º": "NC_NOISE",
            "–ø–µ—Ä–µ–≥—Ä–µ–≤": "NC_OVERHEATING",
            "–∫–æ—Ä—Ä–æ–∑–∏—è": "NC_CORROSION"
        }
        tid = symptom_map.get(entities["symptom"].lower(), "NC_DEFAULT")
        params["tid"] = tid

    query = "&".join([f"{k}={v}" for k, v in params.items()])
    full_url = f"{base_url}?{query}"
    return full_url


# ================================
# 3. Main Loop
# ================================

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–º–æ—â–Ω–∏–∫–∞ –¥–ª—è Winnum / IIoT.Istok")
    print("‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å (–∏–ª–∏ '–≤—ã—Ö–æ–¥'):")

    while True:
        user_text = input("> ").strip()
        if user_text.lower() in ["–≤—ã—Ö–æ–¥", "–∑–∞–∫–æ–Ω—á–∏—Ç—å", "–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"]:
            break

        print("\nüîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π...")
        entities = extract_entities(user_text)

        print("\nüìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏:")
        for key, value in entities.items():
            print(f"- {key.upper()}: {value}")

        print("\nüåê –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏...")
        full_url = build_winnum_url(entities)
        print(f"\nüîó –°—Å—ã–ª–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞: {full_url}")

        print("\nüîó –û—Ç–∫—Ä—ã—Ç–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ...")
        webbrowser.open(full_url)