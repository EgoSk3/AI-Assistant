import speech_recognition as sr
import requests
import json
from datetime import datetime


# ================================
# 1. Speech Recognizer
# ================================

class SpeechRecognizer:
    def __init__(self, engine="whisper"):
        self.recognizer = sr.Recognizer()
        self.engine = engine
        self.configure_recognizer()

    def configure_recognizer(self):
        self.recognizer.pause_threshold = 2.0
        self.recognizer.energy_threshold = 400
        self.recognizer.dynamic_energy_threshold = True

    def record_audio(self):
        with sr.Microphone(device_index=4, sample_rate=16000) as source:
            print("\n–ì–æ–≤–æ—Ä–∏—Ç–µ —Å–µ–π—á–∞—Å... (–¥–ª—è –≤—ã—Ö–æ–¥–∞ —Å–∫–∞–∂–∏—Ç–µ '–∑–∞–∫–æ–Ω—á–∏—Ç—å' –∏–ª–∏ '–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å')")
            self.recognizer.adjust_for_ambient_noise(source, duration=1)

            try:
                audio = self.recognizer.listen(
                    source,
                    timeout=5,
                    phrase_time_limit=10
                )
                return audio
            except sr.WaitTimeoutError:
                print("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ")
                return None

    def recognize_speech(self, audio):
        if audio is None:
            print("–ê—É–¥–∏–æ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ")
            return None

        try:
            if self.engine == "whisper":
                result = self._recognize_whisper(audio)
            elif self.engine == "google":
                result = self._recognize_google(audio)
            else:
                print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–≤–∏–∂–æ–∫: {self.engine}")
                return None

            return result.strip() if isinstance(result, str) else None

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è ({self.engine}): {str(e)[:100]}")
            return None

    def _recognize_whisper(self, audio):
        try:
            result = self.recognizer.recognize_whisper(
                audio,
                language="russian",
                model="base"
            )
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω Whisper")
            return result
        except Exception as e:
            print(f"Whisper –æ—à–∏–±–∫–∞: {str(e)}")
            return None

    def _recognize_google(self, audio):
        try:
            result = self.recognizer.recognize_google(
                audio,
                language="ru-RU"
            )
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω Google Web Speech")
            return result
        except Exception as e:
            print(f"Google –æ—à–∏–±–∫–∞: {str(e)}")
            return None

    def run(self):
        print(f"=== –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ ({self.engine}) ===")
        print("–ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –∏ —Ä–∞–∑–±–æ—Ä—á–∏–≤–æ. –î–ª—è –≤—ã—Ö–æ–¥–∞ —Å–∫–∞–∂–∏—Ç–µ '–∑–∞–∫–æ–Ω—á–∏—Ç—å' –∏–ª–∏ '–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å'")
        while True:
            audio = self.record_audio()
            if not audio:
                continue

            text = self.recognize_speech(audio)
            if text:
                print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: \033[1;32m{text}\033[0m")
                if text.lower() in ["–∑–∞–∫–æ–Ω—á–∏—Ç—å", "–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"]:
                    break
                yield text
            else:
                print("–†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")


# ================================
# 2. OLLAMA NER –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
# ================================

def build_prompt(text):
    return f"""
–í—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–∞–º. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –∏–∑–≤–ª–µ–∫–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞.
–ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–∞–Ω–µ–µ), –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ –≤ –æ—Ç–≤–µ—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º.

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã:
- EQUIPMENT ‚Äî –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ (—Å—Ç–∞–Ω–æ–∫, —Ä–æ–±–æ—Ç, –ø—Ä–µ—Å—Å)
- NUMBER ‚Äî –Ω–æ–º–µ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
- SYMPTOM ‚Äî —Å–∏–º–ø—Ç–æ–º (–≤–∏–±—Ä–∞—Ü–∏—è, –ø–µ—Ä–µ–≥—Ä–µ–≤)
- ERROR_CODE ‚Äî –∫–æ–¥ –æ—à–∏–±–∫–∏ (E45, E78)
- ACTION ‚Äî –¥–µ–π—Å—Ç–≤–∏–µ (–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞, –∑–∞–º–µ–Ω–∞)
- URGENCY ‚Äî —É—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
- DATE ‚Äî –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
- COMPONENT ‚Äî –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
- PART ‚Äî –¥–µ—Ç–∞–ª–∏/–∑–∞–ø—á–∞—Å—Ç–∏

–ü—Ä–∏–º–µ—Ä:
"–ù–∞ —Å—Ç–∞–Ω–∫–µ 14 –ø–æ—è–≤–∏–ª—Å—è —Ç—Ä–µ—Å–∫, —Å—Ä–æ—á–Ω–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"
‚Üí 
{{
  "equipment": "—Å—Ç–∞–Ω–æ–∫",
  "number": "14",
  "symptom": "—Ç—Ä–µ—Å–∫",
  "action": "–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
  "urgency": "–≤—ã—Å–æ–∫–∞—è"
}}

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π —Ç–µ–∫—Å—Ç:
"{text}"

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
""".strip()


def ask_ollama(prompt, model="llama3"):
    url = "http://localhost:11434/api/generate"
    payload = {
        "model": model,
        "prompt": prompt,
        "stream": False
    }
    response = requests.post(url, json=payload)
    if response.status_code == 200:
        return response.json().get("response", "")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
        return None


def extract_entities(text):
    prompt = build_prompt(text)
    raw_response = ask_ollama(prompt)
    try:
        return json.loads(raw_response)
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON: {e}")
        return {"raw_response": raw_response}


# ================================
# 3. Main Loop
# ================================

if __name__ == "__main__":
    recognizer = SpeechRecognizer(engine="whisper")

    print("üöÄ –ó–∞–ø—É—Å–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")
    print("–°–∫–∞–∂–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:")

    for user_text in recognizer.run():
        print("\nüîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π...")
        entities = extract_entities(user_text)

        print("\nüìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏:")
        for key, value in entities.items():
            print(f"- {key.upper()}: {value}")

        print("-" * 50)